<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Codaholic]]></title>
  <link href="http://srikumarks.github.com/atom.xml" rel="self"/>
  <link href="http://srikumarks.github.com/"/>
  <updated>2013-01-06T02:53:37+08:00</updated>
  <id>http://srikumarks.github.com/</id>
  <author>
    <name><![CDATA[Srikumar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exploring graha bhedams]]></title>
    <link href="http://srikumarks.github.com/blog/2012/12/30/exploring-grha-bhedams/"/>
    <updated>2012-12-30T15:43:00+08:00</updated>
    <id>http://srikumarks.github.com/blog/2012/12/30/exploring-grha-bhedams</id>
    <content type="html"><![CDATA[<p>Here is a <a href="http://srikumarks.github.com/demos/bhedam">demo web app</a> for exploring rāgās and their bhēdams.</p>

<p>A few weeks ago, I had a conversation with Mr. Ramesh who showed me
some amazing Excel wizardry and spells he&#8217;d cast to be able to take
a raga and ask questions about its <a href="http://en.wikipedia.org/wiki/Graha_bhedam">graha bhēdams</a>. I hadn&#8217;t realized
until then that the question of what the scales of ragas turn into
when you do bhēdams on them (graha or śruti bhēdam) involves a rather
non-trivial mental transformation, though one that is pretty simple
to do on a computer. So I resurrected a rāgā database that I&#8217;d scraped
off Wikipedia&#8217;s <a href="http://en.wikipedia.org/wiki/List_of_Janya_Ragas">Janya Rāgās</a> page some 4 years ago and made this
<a href="http://srikumarks.github.com/demos/bhedam">bhēdam explorer</a> web app.</p>

<p>The app could use some visual love, but it serves the exploratory
purpose as it stands. Have fun with it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scratch pad for text with diacritics]]></title>
    <link href="http://srikumarks.github.com/blog/2012/12/27/scratch-pad-for-text-with-diacritics/"/>
    <updated>2012-12-27T10:09:00+08:00</updated>
    <id>http://srikumarks.github.com/blog/2012/12/27/scratch-pad-for-text-with-diacritics</id>
    <content type="html"><![CDATA[<p>Roman text with a few choice diacritics are a common need when writing about
Indian classical music. Creating unicode text with diacritics that can be
ported between applications is in general a pain. So, I made a small in-browser
app that serves as a <a href="http://srikumarks.github.com/demos/diacritics">scratch pad for common diacritics</a>.</p>

<h3>Usage</h3>

<p>Straight forward. You just type your text in the provided box using normal
roman characters first - ex: &#8220;Sankarabharanam&#8221;. Once you&#8217;ve typed that in,
you select each character to which you want to apply diacritical marks and
click on the mark you want. You can also press the number key corresponding
to the diacritical mark you want for the selected character. With this,
you can get &#8220;Śankarābharaṇam&#8221;.</p>

<p>Your text is automatically saved to local storage, so you can visit the page
any time and retrieve your text. You&#8217;ll <em>never</em> lose text you key in.</p>

<h3>Known issues</h3>

<p>This works fine in Chrome and Safari on MacOSX, but not in Firefox. I haven&#8217;t
yet figured out why it doesn&#8217;t work in Firefox. If you find that it works in
Chrome/Safari on Windows/Linux, please let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A critique of Tuna]]></title>
    <link href="http://srikumarks.github.com/blog/2012/11/09/a-critique-of-tuna/"/>
    <updated>2012-11-09T00:00:00+08:00</updated>
    <id>http://srikumarks.github.com/blog/2012/11/09/a-critique-of-tuna</id>
    <content type="html"><![CDATA[<p>Google has open sourced the <a href="http://github.com/Dinahmoe/tuna">Tuna</a> set of effects used in their <a href="http://www.google.com/?q=jam+with+chrome">Jam with Chrome</a>
project. Here, I collect some thoughts about the code design decisions for their
effects framework, since I myself have written <a href="http://github.com/srikumarks/steller">Steller</a>.</p>

<!-- more -->


<h2>Parameters</h2>

<p>In Tuna, the effects module&#8217;s parameters are presented to the API user as
object properties and implemented using getters and setters. This is obviously
simple from the perspective of a module user. However, it has several disadvantages -</p>

<p>If a module contains another module and you want to expose that parameter,
you&#8217;re forced to write another getter/setter to handle the indirection. Such
parameters cannot be passed around &#8220;by reference&#8221;. The only thing you can
do with them is to set/get their values. &#8220;By reference&#8221; passing is a simple
way to expose an internal module&#8217;s parameters to the module user which is an
important kind of composability.</p>

<p>Owing to the getter/setter approach, meta information about parameters such as
their range, defaults, automation capabilities, etc. need to be stored elsewhere
in a &#8220;defaults&#8221; object, instead of being directly associated with them.</p>

<p>In some of the effects, some internal values and other parameters need to be
recomputed when a couple of parameters change. In this case, the code for
updating the dependent parameters is duplicated since it is not particularly
convenient to write a shared function local when defining parameters using
<code>Object.create</code> like this -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="nx">baseFrequency</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_baseFrequency</span><span class="p">},</span>
</span><span class='line'>    <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_baseFrequency</span> <span class="o">=</span> <span class="mi">50</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nx">value</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_excursionFrequency</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sampleRate</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">baseFrequency</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_excursionOctaves</span><span class="p">));</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">filterBp</span><span class="p">.</span><span class="nx">frequency</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_baseFrequency</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">_excursionFrequency</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">_sweep</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">filterPeaking</span><span class="p">.</span><span class="nx">frequency</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_baseFrequency</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">_excursionFrequency</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">_sweep</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">excursionOctaves</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_excursionOctaves</span><span class="p">},</span>
</span><span class='line'>    <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_excursionOctaves</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_excursionFrequency</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sampleRate</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">baseFrequency</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_excursionOctaves</span><span class="p">));</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">filterBp</span><span class="p">.</span><span class="nx">frequency</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_baseFrequency</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">_excursionFrequency</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">_sweep</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">filterPeaking</span><span class="p">.</span><span class="nx">frequency</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_baseFrequency</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">_excursionFrequency</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">_sweep</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="c1">//...</span>
</span></code></pre></td></tr></table></div></figure>


<p>A simpler way to solve this would be to have parameters be first class objects
that can be inspected, instead of just accessing and setting their values. Meta
data about them can travel along with them. In <a href="http://github.com/srikumarks/steller">Steller</a>, watcher functions can
be installed on parameters run code when the parameter&#8217;s value changes.</p>

<h2>Inheritance using the <code>prototype</code> mechanism</h2>

<p>One of the code design choices that vastly complicates the code in this case
is the choice of using <code>prototype</code> based inheritance to define the properties
of instantiated effects modules. While this is common in the JS world,
in this case it deprives the programmer of a local context in which to hide
internal objects from the effects module&#8217;s user and to write shared private
code like in the case above. Any potential loss of efficiency in not using
the prototype mechanism for this application is insignificant since object
creation is not the thing we should be optimising for.</p>

<p>The &#8220;define all methods and properties within the constructor function&#8221;
approach is much more suitable in this situation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On eval and evil.]]></title>
    <link href="http://srikumarks.github.com/blog/2012/08/28/on-eval-being-evil/"/>
    <updated>2012-08-28T00:00:00+08:00</updated>
    <id>http://srikumarks.github.com/blog/2012/08/28/on-eval-being-evil</id>
    <content type="html"><![CDATA[<p>&#8220;eval is evil&#8221; has become a maxim repeated in the Javascript community.
Douglas Crockford, in <a href="http://shop.oreilly.com/product/9780596517748.do">Javascript: The Good Parts</a>, rightly advises against
hidden and explicit uses of eval for security and clarity reasons. Now, I find
<code>eval</code> useful to implement <a href="http://srikumarks.github.com/gyan/2012/04/14/creating-dsls-in-javascript-using-j-expressions/">DSLs in Javascript</a>. The in-browser <a href="http://coffeescript.org">CoffeeScript</a>
compiler wouldn&#8217;t be possible without <code>eval</code> (directly or indirectly). So, in
this post, I wish to explore what appears interesting about <code>eval</code> that is
relevant to building such DSLs.</p>

<!-- more -->


<p>For this post, I&#8217;ll stick to the behaviour of <code>eval</code> in the <strong>Chrome</strong> browser
(i.e. the V8 engine, which also applies to <a href="http://nodejs.org">Node.js</a>). We&#8217;ll go through a
number of contexts and examine how <code>eval</code> behaves in each of those. You can
copy paste the code shown here to Chrome&#8217;s JS console and run them.</p>

<h2>What is <code>eval</code>?</h2>

<p>A simplistic description is that you pass a Javascript string to <code>eval</code> and it
will &#8220;evaluate&#8221; it as Javascript code, whatever that means. The <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</a>
specification (edition 5.1) has the following to say on <code>eval</code> -</p>

<blockquote><p><strong>10.4.2 Entering Eval Code</strong></p>

<p>The following steps are performed when control enters the execution context for
eval code:</p>

<ol>
<li><p>If there is no calling context or if the eval code is not being evaluated by
a direct call (15.1.2.1.1) to the eval function then,</p>

<p> a. Initialise the execution context as if it was a global execution context
 using the eval code as C as described in 10.4.1.1.</p></li>
<li><p>Else,</p>

<p> a. Set the <code>ThisBinding</code> to the same value as the <code>ThisBinding</code> of the calling
 execution context.</p>

<p> b. Set the LexicalEnvironment to the same value as the <code>LexicalEnvironment</code>
 of the calling execution context.</p>

<p> c. Set the <code>VariableEnvironment</code> to the same value as the <code>VariableEnvironment</code>
 of the calling execution context.</p></li>
<li><p>If the eval code is strict code, then</p>

<p> a. Let <code>strictVarEnv</code> be the result of calling <code>NewDeclarativeEnvironment</code>
 passing the <code>LexicalEnvironment</code> as the argument.</p>

<p> b. Set the <code>LexicalEnvironment</code> to <code>strictVarEnv</code>.</p>

<p> c. Set the <code>VariableEnvironment</code> to <code>strictVarEnv</code>.</p></li>
<li><p>Perform <em>Declaration Binding Instantiation</em> as described in 10.5 using the
eval code.</p></li>
</ol>


<p><strong>10.4.2.1 Strict Mode Restrictions</strong></p>

<p>The eval code cannot instantiate variable or function bindings in the variable
environment of the calling context that invoked the eval if either the code of
the calling context or the eval code is strict code. Instead such bindings are
instantiated in a new VariableEnvironment that is only accessible to the eval
code.</p></blockquote>

<h2>Introducing local variables</h2>

<p>An expression of the form <code>eval("var x = 10;")</code> is capable of introducing a new
variable <code>x</code> in the context in which it is executed. However, as noted in the
ECMA specification, if the eval code is strict, then you cannot introduce a new
variable this way - i.e. <code>eval("var x = 10;")</code> will work, but
<code>eval('"use strict"; var x = 10;')</code> will not work. No exception is thrown, but the
variable is simply not introduced into the enclosing environment, though it is
available to the rest of the evaled code.</p>

<p>Consider the following function -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">localVars</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">stmt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">eval</span><span class="p">(</span><span class="nx">stmt</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All of the following behave as one might expect -</p>

<ol>
<li><code>localVars(10, "var y = 5;")</code> returns <code>15</code></li>
<li><code>localVars(10, "var y = x + 5;")</code> returns <code>25</code>.</li>
<li><code>localVars(10, "'use strict'; var y = 5;")</code> raises a <code>ReferenceError: y is not defined</code> exception.</li>
</ol>


<h2>Capturing local variables in closures</h2>

<p>Consider the following function -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">captureSecretValue</span><span class="p">(</span><span class="nx">code</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">secret</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">code</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>captureSecretValue("secret")</code> returns <code>3.14159</code> as expected. You can also
create closures that capture the &#8220;secret&#8221; value -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">captureSecretValue</span><span class="p">(</span><span class="s2">&quot;(function (x) { return secret * x; })&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span> <span class="c1">// prints &quot;3.14159&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, the following gives a <code>ReferenceError</code> -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">nest</span><span class="p">(</span><span class="nx">code</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">nestedSecret</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">code</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">captureNestedSecret</span><span class="p">(</span><span class="nx">code</span><span class="p">,</span> <span class="nx">nest</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">secret</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">nest</span><span class="p">(</span><span class="nx">code</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">captureNestedSecret</span><span class="p">(</span><span class="s2">&quot;secret * nestedSecret&quot;</span><span class="p">,</span> <span class="nx">nest</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>This illustrates that only the variables in the <em>lexical</em> context are available
to <code>eval</code> and not those in its <em>evaluation</em> context. The following will
therefore print <code>6.28318</code> as expected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">captureNestedSecret</span><span class="p">(</span><span class="nx">code</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">secret</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">nest</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">nestedSecret</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">code</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">nest</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">captureNestedSecret</span><span class="p">(</span><span class="s2">&quot;secret * nestedSecret&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Scope objects</h2>

<p>If you have an object whose keys give variable names and whose values give their values,
you can use <code>eval</code> in conjunction with the <code>with</code> statement (beware: evil squared!) to evaluate
code in that scope. Here is what I mean -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">evalInScope</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">code</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">with</span> <span class="p">(</span><span class="nx">scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">code</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">scope</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">20</span><span class="p">};</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">evalInScope</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="s2">&quot;a + b&quot;</span><span class="p">));</span> <span class="c1">// prints &quot;30&quot;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">evalInScope</span><span class="p">(</span><span class="nb">Math</span><span class="p">,</span> <span class="s2">&quot;acos(0)&quot;</span><span class="p">));</span> <span class="c1">// prints &quot;1.5707963267948966&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is more interesting is that you can capture the &#8220;variables&#8221; in a closure
that you create using eval as follows -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">evalInScope</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="s2">&quot;(function (c) { return a + b * c; })&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span> <span class="c1">// prints &quot;10&quot;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// prints &quot;50&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since it is not the <em>values</em> of the variables that are being captured, but
the <em>references</em>, you can now do -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">scope</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span> <span class="c1">// prints &quot;100&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you subsequently delete one of the variables in the <code>scope</code> object, you get
a <code>ReferenceError</code> as one might expect. The <code>scope</code> object therefore provides
access to the scope chain of the created closure. This interception is deep,
since you can introduce new variables into the scope by manipulating <code>scope</code>
as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">scope</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span> <span class="mi">10</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">evalInScope</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="s2">&quot;(function (c) { return a + b * c; })&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>  <span class="c1">// ReferenceError</span>
</span><span class='line'><span class="nx">scope</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>       <span class="c1">// Introduce binding for &quot;b&quot;.</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>  <span class="c1">// prints &quot;10&quot;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>  <span class="c1">// prints &quot;50&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Named functions within <code>with</code></h3>

<p>The following code doesn&#8217;t work and throws a <code>ReferenceError</code> because
the <code>inner</code> closure is instantiated outside the <code>with</code> scope by the V8
compiler, contrary to what it might look like.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// (1) doesn&#39;t work</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">scope</span> <span class="o">=</span> <span class="p">{</span><span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;hello world&quot;</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">greeting</span><span class="p">;</span>
</span><span class='line'><span class="kd">with</span> <span class="p">(</span><span class="nx">scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">inner</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">greeting</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">inner</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following alternative works in V8 because the closure is <em>created</em>
when executing a statement within the <code>with</code> clause.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// (2) works</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">scope</span> <span class="o">=</span> <span class="p">{</span><span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;hello world&quot;</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">greeting</span><span class="p">;</span>
</span><span class='line'><span class="kd">with</span> <span class="p">(</span><span class="nx">scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">inner</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">greeting</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">inner</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This difference can be a WTF and points to the general recommendation of only
using the latter &#8220;name a function through assignment&#8221; approach. We know that
the definitions of named functions are lifted to the top of the surrounding
scope, but also know that they are lifted out of any surrounding <code>with</code> blocks
as well.</p>

<blockquote><p><strong>Update</strong>: This inconsistency is a bug in V8 looks like. Firefox&#8217;s VM
behaves consistently in both the cases above. I&#8217;ve submitted a <a href="https://code.google.com/p/v8/issues/detail?id=2311">V8 bug report</a>
for this problem.</p></blockquote>

<h2>Preventing access to global objects</h2>

<p>In a browser environment, all global symbols are available as properties of the
<code>window</code> object. We can use this, in conjunction with the &#8220;scope object&#8221;
feature as discussed above, to evaluate code that is to be prevented from
touching any of these global objects or classes. This gives us a poor man&#8217;s
sandbox.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">;(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">poorMansSandbox</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">makeSandbox</span><span class="p">,</span> <span class="nx">world</span><span class="p">,</span> <span class="nx">allowed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Makes obj and all its ancestors read-only.</span>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">freezeHard</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">iter</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span> <span class="nx">iter</span><span class="p">;</span> <span class="nx">iter</span> <span class="o">=</span> <span class="nx">iter</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="p">{</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">freeze</span><span class="p">(</span><span class="nx">iter</span><span class="p">);</span> <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">scope</span><span class="p">,</span> <span class="nx">sandbox</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Make poorMansSandbox itself unavailable.</span>
</span><span class='line'>            <span class="nx">scope</span> <span class="o">=</span> <span class="p">{</span><span class="nx">poorMansSandbox</span><span class="o">:</span> <span class="kc">undefined</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Mask every global thing visible, except &quot;allowed&quot;.</span>
</span><span class='line'>            <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyNames</span><span class="p">(</span><span class="nx">world</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">g</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">scope</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">allowed</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">g</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">scope</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span> <span class="o">=</span> <span class="nx">freezeHard</span><span class="p">(</span><span class="nx">world</span><span class="p">[</span><span class="nx">g</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">freezeHard</span><span class="p">(</span><span class="nx">scope</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">sandbox</span> <span class="o">=</span> <span class="nx">makeSandbox</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">scope</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Call the sandboxer with no arguments to</span>
</span><span class='line'>                <span class="c1">// force it to update its world state.</span>
</span><span class='line'>                <span class="nx">update</span><span class="p">();</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">sandbox</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}(</span>  <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">with</span> <span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}),</span>
</span><span class='line'>        <span class="k">this</span><span class="p">,</span>
</span><span class='line'>        <span class="p">[</span><span class="s2">&quot;eval&quot;</span><span class="p">,</span> <span class="s2">&quot;Math&quot;</span><span class="p">,</span> <span class="s2">&quot;Object&quot;</span><span class="p">,</span> <span class="s2">&quot;Array&quot;</span><span class="p">,</span> <span class="s2">&quot;Function&quot;</span><span class="p">,</span> <span class="s2">&quot;String&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;Date&quot;</span><span class="p">,</span> <span class="s2">&quot;Number&quot;</span><span class="p">,</span> <span class="s2">&quot;Boolean&quot;</span><span class="p">,</span> <span class="s2">&quot;Infinity&quot;</span><span class="p">,</span> <span class="s2">&quot;NaN&quot;</span><span class="p">,</span> <span class="s2">&quot;isNaN&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;isFinite&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">));</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<p>The idea behind the above code is to prevent access to global properties
other than the ones given in the <code>allowed</code> array. Furthermore, we also
don&#8217;t want the eval code to add new global properties by simple assignment,
for which we simply use strict mode evaluation.</p>

<p>Though this prevents access to existing global properties, it doesn&#8217;t prevent
access to properties that will be added to <code>window</code> <em>after</em> the <code>eval</code> happens.
To update the internal <code>scope</code> object of the <code>poorMansSandbox</code>, call it
once with no arguments before calling it on the string to be evaluated.</p>

<p>Of course, the eval-ed code can still do malicious things, but it cannot
at least do them inadvertently. Hence &#8220;poor man&#8217;s&#8221;.</p>

<h2>Conclusion</h2>

<p><code>eval</code> should be used with tons of caution. However, if you&#8217;re interested in
making DSLs around Javascript, it helps to know its workings a bit deeper.
Remember - there is always something &#8220;good&#8221; in every &#8220;evil&#8221; ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Toy language using j-expressions]]></title>
    <link href="http://srikumarks.github.com/blog/2012/04/30/toy-language-using-j-expressions/"/>
    <updated>2012-04-30T00:00:00+08:00</updated>
    <id>http://srikumarks.github.com/blog/2012/04/30/toy-language-using-j-expressions</id>
    <content type="html"><![CDATA[<p>Posted a &#8220;stream of thought&#8221; compiler for a toy language based
on the idea of j-expressions as a representation for ASTs.</p>

<ul>
<li><a href="http://github.com/srikumarks/jexpr">Code</a></li>
<li><a href="http://srikumarks.github.com/jexpr">Docs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[J-expressions]]></title>
    <link href="http://srikumarks.github.com/blog/2012/04/15/j-expressions/"/>
    <updated>2012-04-15T00:00:00+08:00</updated>
    <id>http://srikumarks.github.com/blog/2012/04/15/j-expressions</id>
    <content type="html"><![CDATA[<p><a href="http://www.json.org">JSON</a> has become a kind of de-facto standard for sharing data among services
on the web. The Lisp folks have enjoyed this luxury ever since &#8230; well ever
since McCarthy made the language and his student implemented an interpreter for
it. What&#8217;s more, they have also had the luxury of using the same syntax for
sharing <em>logic</em> .. and in fact take it for granted. This post is a proposal to
bring that &#8220;luxury&#8221; to the web programming world.</p>

<p><strong>Status:</strong> Draft. Comments welcome.</p>

<!-- more -->


<h2>Why is it useful to be able to share logic?</h2>

<p>If you&#8217;ve already bought into Lisp, you may not need much convincing here.  If
you do ask that question, I&#8217;ve written about <a href="http://srikumarks.github.com/gyan/2012/04/14/creating-dsls-in-javascript-using-j-expressions">DSLs and J-expressions</a> in an
earlier post that may be of interest to you.</p>

<h2>Core syntax</h2>

<ol>
<li><p>A &#8220;J-expression&#8221; is an ordinary JSON-serializeable <strong>object</strong>, whose &#8220;first
key&#8221; is taken to name an &#8220;operator&#8221;, with the whole object serving as its
&#8220;operand&#8221;.</p></li>
<li><p>A J-expression&#8217;s key <strong>must</strong> be an identifier conforming to the following
regular expression</p>

<pre><code> (Letter|$|_)(Letter|DecimalDigit|$|_)*
</code></pre></li>
<li><p>We permit an extension to JSON whereby the key <strong>need not</strong> be a <em>quoted</em>
string.  Nevertheless, a key <strong>must</strong> conform to the above regular expression
even when quoted.</p></li>
<li><p>Everything else &#8211; numbers, strings, dates and arrays &#8211; is just as
specified in <a href="http://www.json.org">JSON</a>.</p></li>
<li><p>We leave the question of how the &#8220;operator&#8221; must use the operands open in
order to allow for eager and lazy computations, and meta-expressions.</p></li>
<li><p>Every J-expression <strong>may</strong> have a <code>comment</code> key whose value is for human
consumption and is therefore expected to have nil impact on the meaning of
the expression to a program.  It <strong>may</strong> therefore be ignored by parsers
and interpreters. J-expression writers, however, <strong>must</strong> strip out these
comment fields before serializing these expressions. This means <code>comment</code>
is a &#8220;reserved key&#8221;.</p></li>
<li><p>Every J-expression <strong>may</strong> have a <code>meta</code> key whose value is a <a href="http://www.json.org">JSON</a> value
and is considered of some relevance to the system processing the script.
This could include additional documentation references, version information,
source URL for a specification of the operator, etc.  ..  the structure of
which is left unspecified. J-expression writers, therefore, <strong>must not</strong>
strip out the <code>meta</code> entry. This means <code>meta</code> is a &#8220;reserved key&#8221;.</p></li>
</ol>


<h4>An example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span><span class="k">do</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">fetchURL</span><span class="o">:</span> <span class="s2">&quot;http://some.data.source/&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">timeout</span><span class="o">:</span> <span class="mf">30.0</span><span class="p">,</span>
</span><span class='line'>       <span class="nx">onfail</span><span class="o">:</span> <span class="p">{</span><span class="nx">raiseError</span><span class="o">:</span> <span class="s2">&quot;URL not reachable&quot;</span><span class="p">}},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">fork</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">displayInElement</span><span class="o">:</span> <span class="s2">&quot;element_id&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">cacheInLocalStorage</span><span class="o">:</span> <span class="s2">&quot;prefix&quot;</span><span class="p">}</span>
</span><span class='line'>        <span class="p">]}]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above script can be read as representing a &#8220;pipe&#8221; where the
data is fetched from some URL and then (concurrently) displayed
in an element and cached in local storage.</p>

<h3>Some considerations</h3>

<ol>
<li><p>J-expression parsers are expected to be support both quoted and
unquoted keys in order to enable &#8220;logic&#8221; and &#8220;data&#8221; to take the
same form.</p></li>
<li><p>J-expression writers are also allowed to use either form, but writing
unquoted keys is preferred since it is more compact than quoted keys and
closer in form to the notion of &#8220;programming&#8221; or &#8220;scripting&#8221;.</p></li>
</ol>


<h4>The &#8220;first key&#8221; as the &#8220;operator&#8221;</h4>

<p>Javascript implementations today preserve the order in which keys are inserted
into objects when traversing keys as long as the keys are not array indices.
Even when the specification does not require them to do so, Google considers it
a de-facto standard that insertion and enumeration order must match whenever
only string keys are involved - as noted in this <a href="http://code.google.com/p/v8/issues/detail?id=164">V8 bug</a>. This de-facto
standard permits easy identification of the &#8220;first key&#8221; in a JSON expression as
shown below &#8211;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">jexpr_operator</span><span class="p">(</span><span class="nx">jexpr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">first_key</span> <span class="k">in</span> <span class="nx">jexpr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">first_key</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In languages such as <a href="http://www.python.org">Python</a>, <a href="http://ruby-lang.org">Ruby</a> and <a href="http://www.lua.org">Lua</a>, we cannot assume that the
first key can be so easily identified, but since all these languages have
custom syntax checking parsers for scanning JSON, it is a trivial extension to
the parser to add a special key to an object to help identify the first key.</p>

<blockquote><p>The key <code>__jexpr_operator__</code> is reserved for parsers so that they can
indicate what the &#8220;first key&#8221; is by giving its name as the value of this key.
For the rest of the system, the presence of this key overrides any key order
already obeyed by the system. J-expression writers must use this key to
determine which key to write first, but <strong>must not</strong> output this key itself.</p></blockquote>

<p>Parsers in languages with objects that do not preserve identity between key
insertion and enumeration order can add a small bit of logic to insert the
above special key.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">jexpr_operator</span><span class="p">(</span><span class="nx">jexpr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="s2">&quot;__jexpr_operator__&quot;</span> <span class="k">in</span> <span class="nx">jexpr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">jexpr</span><span class="p">.</span><span class="nx">__jexpr_operator__</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">first_key</span> <span class="k">in</span> <span class="nx">jexpr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">first_key</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Beyond this, we do not need the order of the other keys to be preserved and
operator implementations should not make that assumption.</p>

<h2>Can we build programming languages using j-expressions?</h2>

<p>It sure looks possible to do so. For example, here is a (toy) compiler for
<a href="https://github.com/srikumarks/jexpr">J a Scheme-like language</a> that is about as expressive as Scheme .. except for the
lack of support for tail call elimination.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating DSLs in Javascript using J-expressions]]></title>
    <link href="http://srikumarks.github.com/blog/2012/04/14/creating-dsls-in-javascript-using-j-expressions/"/>
    <updated>2012-04-14T00:00:00+08:00</updated>
    <id>http://srikumarks.github.com/blog/2012/04/14/creating-dsls-in-javascript-using-j-expressions</id>
    <content type="html"><![CDATA[<p>Scheme and Lisp have for long had powerful meta-programming abilities due to
the syntax of their language being the same as the syntax for the main data
structure supported by the language - the humble list. These languages are
therefore well suited for inventing smaller special purpose &#8220;domain specific
languages.</p>

<p>Javascript, on the other hand, has a &#8220;full blown syntax&#8221; that makes
meta-programming not for the faint of heart. One consequence of the lack of
such ability is that developers have not had the benefit of the abstraction
possible through small special purpose DSLs.</p>

<p>Here, I outline an approach for creating DSLs in Javascript using the now
prevalent <a href="http://www.json.org">JSON</a> format that is native to the language. The initial part tries
to explain the kinds of scenarios in which one might consider building a DSL,
which is important to have an idea about. Later, I get into the actual
representation using JSON.</p>

<!-- more -->


<h2>When to make a DSL? .. or &#8220;Hunting of the Closure&#8221;.</h2>

<p>Under normal circumstances, you should consider developing your abstractions as
&#8220;modules&#8221;. Modules (or &#8220;libraries&#8221;) offer basic encapsulation and hiding
facilities that JS developers are familiar with. You can help them benefit from
your work by leveraging that familiarity.</p>

<p>On the rare occasion though, you might find yourself writing code that starts
looking like a small &#8220;compiler&#8221;  or &#8220;runtime&#8221;. In such circumstances, creating
a DSL for that part of the system might be worthwhile to consider &#8211; the purpose,
again, being that it might ease the job of those that your package targets.</p>

<p>A tipping point can happen when you discover that you are working with a
category of objects that are &#8220;closed over&#8221; a suite of operations.  In
mathematics, a set of objects is said to be &#8220;closed&#8221; with respect to a function
if the function maps objects of the set to other objects in the same set and we
say the set &#8220;has the closure property&#8221;. But before we get to why that&#8217;s
significant, let&#8217;s take a quick look at a simple example.</p>

<h3>The &#8220;closure property&#8221; - an example</h3>

<p>Say we want a framework to create and render visuals that vary in time &#8211; like,
maybe, umm &#8230; a video? Here is a simple representation of such a visual, which
we&#8217;ll call a &#8220;show&#8221;  -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">show</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// calculate...</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">image</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given such a &#8220;show&#8221;, it is trivial to write a renderer for it -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">render</span><span class="p">(</span><span class="nx">show</span><span class="p">,</span> <span class="nx">duration_ms</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">startTime_ms</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">-</span> <span class="nx">startTime_ms</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">context</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="nx">show</span><span class="p">(</span><span class="nx">t</span><span class="p">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">t</span> <span class="o">&lt;</span> <span class="nx">duration_ms</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, I want an operator which will delay a given show by a specified amount
of time. Simple -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">delay</span><span class="p">(</span><span class="nx">show</span><span class="p">,</span> <span class="nx">dt_ms</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">show</span><span class="p">(</span><span class="nx">t</span> <span class="o">-</span> <span class="nx">dt_ms</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>How about a &#8220;cut&#8221; from one show to another at a given time. Also simple -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">cut</span><span class="p">(</span><span class="nx">when</span><span class="p">,</span> <span class="nx">show1</span><span class="p">,</span> <span class="nx">show2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">t</span> <span class="o">&lt;</span> <span class="nx">when</span> <span class="o">?</span> <span class="nx">show1</span> <span class="o">:</span> <span class="nx">show2</span><span class="p">)(</span><span class="nx">t</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if we represent video clips using such <code>show</code>s, those two functions under
which the set of <code>show</code>s is closed give us all we need to make an edited
production &#8230;. because we can combine them.  Note that <code>delay</code> takes a show
and produces a show, and so does <code>cut</code> &#8230; which takes <em>two</em> shows, yes, but
that&#8217;s the same idea. This kind of combinatorial power is valuable when
modelling a domain.</p>

<blockquote><h5>ShowTime</h5>

<p>The interface to <a href="http://www.muvee.com">muvee Reveal</a>&#8217;s rendering engine &#8220;ShowTime&#8221; is built
around this kind of an abstraction. The details of <a href="http://muvee-style-authoring.googlecode.com/svn/doc/main/ShowTime_-_the_muvee_timeline.html">ShowTime</a> and the DSL for
<a href="http://muvee-style-authoring.googlecode.com">authoring muvee&#8217;s &#8220;styles&#8221;</a> built on top of this API are available publicly.
In this case, the DSL abstracts away implementation details such as the deep
nesting of functions that might result in a naive implementation.</p></blockquote>

<h2>Functions are closed under composition</h2>

<p>Here is what makes the closure property worth hunting for &#8211;</p>

<blockquote><p>When you have several functions under which your set is closed, it is also
closed under <em>arbitrary compositions</em> of these functions.</p></blockquote>

<p>So, well, why bother with a DSL? Why not just use function composition?  One
reason is that, in the real world, your set is closed with respect to each of
these functions <em>only under certain constraints</em>. These constraints might make
it difficult to predict whether a given composition of these functions is a
valid operation in your domain. You will need to validate a composition
<em>before</em> you begin to act on it, which becomes difficult if you only have
access to the composition and not the parts. A DSL that abstracts over these
constraints by exposing only that subset of compositions that are valid in the
domain would therefore be of great help to people reusing your work.</p>

<blockquote><p>The DSL&#8217;s purpose, then, is to hide the constraints under which closure is
possible and composition operations are valid - i.e. where composition and
use are context sensitive.</p></blockquote>

<h2>A DSL for asynchronous operations</h2>

<p>Let&#8217;s consider an example where having a DSL seems beneficial - composing
asynchronous operations.</p>

<p>It is a common convention for a function that does some asynchronous action to
accept &#8220;callback&#8221; and &#8220;errback&#8221; functions to call when it succeeds or fails
respectively.  Composing such actions into sequences soon turns into what is
usually referred to as &#8220;callback hell&#8221; and the person reading the source soon
looses sight of the whole flow of control.</p>

<p>So, do we satisfy our &#8220;DSL criteria&#8221; here?</p>

<ol>
<li>Closure property? CHECK. A sequence of operations is itself an operation.</li>
<li>Constraints? CHECK. A sequence is allowed to proceed normally only when an
operation doesn&#8217;t fail. There are many error handling strategies when an
operation fails and we may not have seen all of them yet.</li>
</ol>


<p>Let&#8217;s then make a small DSL for sequencing asynchronous operations.</p>

<h2>Representing asynchronous operations</h2>

<p>First we&#8217;re going to need a way to define new asynchonous operations
in plain Javascript for our &#8220;primitives&#8221;. A simple representation is
to model an async operation (let&#8217;s call them &#8220;asop&#8221;s for convenience)
as a function that takes a specific set of arguments as follows &#8211;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">asop</span><span class="p">(</span><span class="nx">M</span><span class="p">,</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">success</span><span class="p">,</span> <span class="nx">failure</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="c1">// we&#39;re good.</span>
</span><span class='line'>    <span class="nx">M</span><span class="p">.</span><span class="nx">start</span><span class="p">(</span><span class="nx">success</span><span class="p">,</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">M</span><span class="p">.</span><span class="nx">end</span><span class="p">,</span> <span class="nx">M</span><span class="p">.</span><span class="nx">failure</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Something bad happened</span>
</span><span class='line'>    <span class="nx">M</span><span class="p">.</span><span class="nx">start</span><span class="p">(</span><span class="nx">failure</span><span class="p">,</span> <span class="nx">M</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;bad&quot;</span><span class="p">,</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">success</span><span class="p">,</span> <span class="nx">failure</span><span class="p">),</span> <span class="nx">M</span><span class="p">.</span><span class="nx">end</span><span class="p">,</span> <span class="nx">M</span><span class="p">.</span><span class="nx">end</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function takes four parameters -</p>

<ol>
<li><code>M</code> is a module that provides facilities for starting an asop &#8211;
<code>M.start</code> and a terminal operation <code>M.end</code> that does nothing and stops all
processing.</li>
<li><code>input</code> is the data being passed to the asop to do its job.</li>
<li><code>success</code> is an asop to start once this asop finishes
successfully.</li>
<li><code>failure</code> is an asop to start if this asop cannot be completed for
some reason.</li>
</ol>


<blockquote><p>Note that an asop is recursively defined in terms of and makes use of two
other asops <code>success</code> and <code>failure</code>, which themselves have the <em>same</em>
function signature.</p></blockquote>

<p>We take <code>M.error</code> to be a utility that produces an error object that captures
the current error state to pass to the failure operation. Here is a simple
definition for <code>M</code> &#8211;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">M</span><span class="p">.</span><span class="nx">start</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">op</span><span class="p">,</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">succ</span><span class="p">,</span> <span class="nx">fail</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">op</span><span class="p">(</span><span class="nx">M</span><span class="p">,</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">succ</span><span class="p">,</span> <span class="nx">fail</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">M</span><span class="p">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">descr</span><span class="p">,</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">succ</span><span class="p">,</span> <span class="nx">fail</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">({</span><span class="nx">descr</span><span class="o">:</span> <span class="nx">descr</span><span class="p">,</span> <span class="nx">input</span><span class="o">:</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">success</span><span class="o">:</span> <span class="nx">succ</span><span class="p">,</span> <span class="nx">failure</span><span class="o">:</span> <span class="nx">fail</span><span class="p">});</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">M</span><span class="p">.</span><span class="nx">end</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Sequencing two operations</h2>

<p>Since our operations are ordinary functions, we can write a &#8220;sequencing operator&#8221;
for combining two operations as a higher order function as follows &#8211;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">seq</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">M</span><span class="p">,</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">success</span><span class="p">,</span> <span class="nx">failure</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">M</span><span class="p">.</span><span class="nx">start</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">seq</span><span class="p">(</span><span class="nx">next</span><span class="p">,</span> <span class="nx">success</span><span class="p">),</span> <span class="nx">failure</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note</em>: This looks like infinite recursion, but it will terminate automatically
when <code>M.end</code> is passed for <code>next</code> because, we define <code>M.end</code> to be the operation
that doesn&#8217;t continue further.</p>

<h2>Making a chain of operations</h2>

<p>The humble <code>seq</code> operator can now be put to use to chain an arbitrary
number of operations given as an array &#8212;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">chain</span><span class="p">(</span><span class="nx">operations</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">revOps</span> <span class="o">=</span> <span class="nx">operations</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">reverse</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">M</span><span class="p">,</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">success</span><span class="p">,</span> <span class="nx">failure</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">M</span><span class="p">.</span><span class="nx">start</span><span class="p">(</span><span class="nx">revOps</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">seq</span><span class="p">,</span> <span class="nx">success</span><span class="p">),</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">M</span><span class="p">.</span><span class="nx">end</span><span class="p">,</span> <span class="nx">failure</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Umm &#8230; why do we need a DSL again?</h2>

<p>You&#8217;d be right in asking that question. So far, it looks like the language is
expressive enough to let us code up all these compositions using plain higher
order functions. So, let me throw something into the mix that might cause you
to stumble if you think such functions alone are adequate.</p>

<p>Consider the exchanges that happen between a web server and a client (browser).
A client instructs a web server to perform some operation, the server gets back
when done, or with progress notifications, then the client does a few async things
like store some data locally, and then makes the next request and so on. The ability
to represent a <em>sequence</em> of actions directly is a boon to take care of all these
exchanges happening between these two dance partners.</p>

<blockquote><h3>So here is your task - ###</h3>

<p>Abstract away the transaction to survive a termination of connection with the
server. I&#8217;m not talking packet loss here.  I&#8217;m talking about the user
initiating a series of operations and in the middle of things shutting down
the browser. What I want to happen is for the operations to continue exactly
from wherever they left off &#8211; because I cannot &#8220;throw an exception&#8221; and undo
a rocket launch. If the client was waiting for a response from the server, it
should again start waiting for that response; and by implication if the
server was doing something and found out that the connection had terminated
at the &#8220;next&#8221; step, it should&#8217;ve stored away whatever it needed to do to
continue, and must resume that when the user connects again, maybe after some
mild handshaking. In particular, it is <em>not</em> acceptable to terminate the
operation sequence just because the browser was closed.</p></blockquote>

<p>Trying to do something like this is where reifying processes as functions
breaks down. To a lisp/scheme programmer, a solution would already be in sight
&#8211; use s-expressions to represent operations and store away instructions in
that form. What might we do in the Javascript world?</p>

<h2>J expressions</h2>

<p>The image I have in my mind now is Douglas Crockford standing with legs apart,
arms folded, cape flying with a speech bubble pointing to his head saying
&#8220;JSON to the rescue!&#8221;.</p>

<p>Since we have our framework taking care of coordinating the success and failure
of operations, all it takes to <em>specify</em> an operation, given a known set of
named &#8220;primitive&#8221; operations, are the following &#8211;</p>

<ol>
<li>The <em>name</em> of the operation to start.</li>
<li>An <em>input</em> object to customize any details of the operation.</li>
</ol>


<p>So, there you go, we can change our representation of an operation from being
a function to something that looks like -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span><span class="nx">opname</span><span class="o">:</span> <span class="nx">input_object</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Technically, that&#8217;ll be <code>{"opname": input_object}</code> in JSON, but let&#8217;s ignore
that difference since it is <em>serializable</em> using JSON, which is what&#8217;s
important.)</p>

<p>The input object is also a literal or computed <em>value</em> which we restrict to
JSON-serializable values. The named primitive operation can itself be provided
in a module as a function that takes the whole spec object and does what it is
supposed to do.</p>

<p>We can now specify a series of operations as an array in this form -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span><span class="k">do</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">ask</span><span class="o">:</span> <span class="s2">&quot;Enter file name: &quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;file&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">fetchFile</span><span class="o">:</span> <span class="p">{</span><span class="nx">showProgress</span><span class="o">:</span> <span class="s2">&quot;progress_bar&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="nx">reportInterval</span><span class="o">:</span> <span class="mf">1.0</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">spawn</span><span class="o">:</span> <span class="p">{</span><span class="nx">withRetry</span><span class="o">:</span> <span class="p">{</span><span class="nx">uploadToDropbox</span><span class="o">:</span> <span class="p">{</span><span class="nx">user</span><span class="o">:</span> <span class="s2">&quot;cat&quot;</span><span class="p">,</span> <span class="nx">password</span><span class="o">:</span> <span class="s2">&quot;meow&quot;</span><span class="p">}},</span>
</span><span class='line'>                <span class="nx">maxTries</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">onfail</span><span class="o">:</span> <span class="p">{</span><span class="k">do</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                            <span class="p">{</span><span class="nx">deleteTempFiles</span><span class="o">:</span> <span class="kc">null</span><span class="p">},</span>
</span><span class='line'>                            <span class="p">{</span><span class="nx">ask</span><span class="o">:</span> <span class="s2">&quot;Dropbox upload failed. Try again?&quot;</span><span class="p">,</span>
</span><span class='line'>                                <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;yes/no&quot;</span><span class="p">,</span>
</span><span class='line'>                                 <span class="nx">yes</span><span class="o">:</span> <span class="p">{</span><span class="nx">retry</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>                                  <span class="nx">no</span><span class="o">:</span> <span class="p">{</span><span class="nx">raise</span><span class="o">:</span> <span class="s2">&quot;Give up&quot;</span><span class="p">}}</span>
</span><span class='line'>                            <span class="p">]}}},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">cacheInLocalStore</span><span class="o">:</span> <span class="s2">&quot;prefix&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">showInElement</span><span class="o">:</span> <span class="s2">&quot;element_id&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we are given the primitive operations as members of a module <code>M</code>, we can run
a primitive operation as follows -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">runPrimitiveOperation</span><span class="p">(</span><span class="nx">opspec</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">M</span><span class="p">,</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">success</span><span class="p">,</span> <span class="nx">failure</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">opname</span> <span class="k">in</span> <span class="nx">opspec</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">M</span><span class="p">[</span><span class="nx">opname</span><span class="p">](</span><span class="nx">M</span><span class="p">,</span> <span class="nx">opspec</span><span class="p">,</span> <span class="nx">input</span><span class="p">,</span> <span class="nx">success</span><span class="p">,</span> <span class="nx">failure</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><h4>Note</h4>

<p>Here I&#8217;m making use of the fact that JS engines today such as V8 always
enumerate the keys of an object in the order in which they were added to it.
This is what lets us identify the <em>first</em> key as determining the operation to
start with the operation implementation knowing what to make of the other
keys in the expression, the parameters and so on.</p>

<p>Also note that we&#8217;ve put in a pipeline here &#8211; i.e. <code>ask</code> gets a file name
that it passes as input to <code>fetchFile</code> which passes the fetched file data to
<code>spawn</code>, and so on. <code>spawn</code> is a higher order operation, since it takes an
operation as the argument to perform concurrently, while continuing by
passing its input through to <code>cacheInLocalStore</code>.</p></blockquote>

<p>Our framework, then, serves as an interpreter for this mini language, providing
the necessary abstractions on <em>how</em> we expect these operations to be executed
behind the scenes. What is important is that <em>users</em> of our framework are not
forced to think about browser shutdown/restart cases and can simply assume
that the infrastructure we provide will &#8220;do the right thing&#8221;.</p>

<p>Now, I&#8217;m not going to go into details of what one actually needs to do to
<em>implement</em> the shutdown/restart behaviour, but at this point, it ought to be
clear enough that given a serializable representation of &#8220;operations still left
to do&#8221; and a serializable representation of the input to give to this sequence,
we can dump both at any point to disk (plus some book keeping info) and resume
after a browser/server restart. We&#8217;ll need to do that for <em>each task sequence</em>
that&#8217;s active at the point the shutdown is initiated.</p>

<p>The important thing is that the one writing the script can focus on writing the
script instead of the operational details.</p>

<h2>Recap</h2>

<p>The main takeaways from this post are the following -</p>

<ol>
<li><p>If you find categories of objects in your problem domain that are closed
over a number of functions and you want to abstract away the constraints
under which those functions can be combined, you may find it useful to
create a DSL for your domain.</p></li>
<li><p>The consistent implementation of key enumeration order of objects in
Javascript engines allows us to write <strong>specifications of composeable
computations</strong> using generic JSON-serializable notation that we can call
&#8220;J-expressions&#8221;.</p>

<pre><code>{opname: main_parameter,
    keyword1: value1,
    keyword2: value2,
    ...}
</code></pre></li>
<li><p>J-expressions, in combination with functions that implement what the
operation named &#8220;opname&#8221; is supposed to do, are then a systematic way to
approach DSL construction within Javascript.  The notation is as expressive
as s-expressions. For instance, here is a way to write a &#8220;higher order
asop&#8221; :)</p>

<pre><code>{lambda_the_ultimate: ["arg"],
    do: [
        {step1: ..},
        {step2: ..}
    ]}
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A mental model for variables and closures in Javascript]]></title>
    <link href="http://srikumarks.github.com/blog/2012/04/13/a-mental-model-for-variables-and-closures-in-javascript/"/>
    <updated>2012-04-13T00:00:00+08:00</updated>
    <id>http://srikumarks.github.com/blog/2012/04/13/a-mental-model-for-variables-and-closures-in-javascript</id>
    <content type="html"><![CDATA[<p>Closures and variables have a strained relationship in Javascript that causes
much confusion among newcomers and results in hard to spot bugs even for
experienced JS coders. It is good to have a clear and accurate &#8220;mental model&#8221;
of this relationship using which you can correctly predict what would happen
with any given piece of code.</p>

<p>I came up with such a mental model a while back and posted it on <a href="http://news.ycombinator.com/item?id=2688438">Hacker News</a>
&#8230; which I reproduce here.</p>

<!-- more -->


<p>Pretend that variables refer to storage locations in an array and you
identify them using indices - <code>v = [..., v[100], v[101], v[102], v[103], ....]</code></p>

<p>For example, take the function in <a href="http://stackoverflow.com/questions/111102/how-do-javascript-closures-work">the stackoverflow answer</a> -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="p">(</span><span class="o">++</span><span class="nx">tmp</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you make a call to <code>foo(10)</code>, pretend that the bound variables in the body
of the function get assigned sequence numbers starting from 100 -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">v</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// x = 10</span>
</span><span class='line'>    <span class="nx">v</span><span class="p">[</span><span class="mi">101</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>  <span class="c1">// var tmp = 3;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="p">(</span><span class="o">++</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="mi">101</span><span class="p">])));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you get as the result,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="p">(</span><span class="o">++</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="mi">101</span><span class="p">])));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>y</code> remains as such because it hasn&#8217;t been bound to a value just yet. That will
happen only when you call this result function.</p>

<p>Now, when you call foo another time like <code>foo(20)</code>, the sequence continues from 102 &#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">v</span><span class="p">[</span><span class="mi">102</span><span class="p">]</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// x = 20</span>
</span><span class='line'>    <span class="nx">v</span><span class="p">[</span><span class="mi">103</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>  <span class="c1">// var tmp = 3;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="mi">102</span><span class="p">]</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="p">(</span><span class="o">++</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="mi">103</span><span class="p">])));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you get another function as the result -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="mi">102</span><span class="p">]</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="p">(</span><span class="o">++</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="mi">103</span><span class="p">])));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The store now reads <code>v[100] = 10, v[101] = 3, v[102] = 20 and v[103] = 3</code>.  It
becomes clear what the two result functions do. Note that they do not share the
same storage locations and therefore the two <code>++</code> calls increment different
storage locations.  In this model, each <code>var</code> statement and each argument of a
function causes the index assigned to be incremented on a function call, and
unbound variables do not cause increments. The behaviour of closures created in
javascript is as though such an indefinitely increasing numbering scheme is
being used under the hood.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classes and Javascript]]></title>
    <link href="http://srikumarks.github.com/blog/2012/04/12/classes-and-javascript/"/>
    <updated>2012-04-12T00:00:00+08:00</updated>
    <id>http://srikumarks.github.com/blog/2012/04/12/classes-and-javascript</id>
    <content type="html"><![CDATA[<p>If you have been programming in Java and C++ for a while and are used to
thinking about problems in terms of classes and inheritance, you may find
yourself struggling with Javascript since it has only objects.  This post is to
&#8211; a) provide you with a perspective on why programming with only objects is
powerful and b) show you how to translate the class-based concepts you&#8217;re used
to thinking in into the Javascript world.</p>

<p>The Javascript object system comes from the language <a href="http://en.wikipedia.org/wiki/Self_(programming_language)">Self</a> which pioneered
object oriented modeling using prototypes, along with many dynamic compilation
techniques that later went into the HotSpot JVM. The motivation for destroying
the class-object dichotomy is that working with classes forces you to think
about object categories well before you&#8217;ve really understood the problem
domain.  The claim by the Self folks is that your approximate and often
downright invalid classes get frozen in over time and the system becomes harder
to adapt to changes in understanding about the problem being modelled.</p>

<p>So, what <em>are</em> classes? &#8230; really?</p>

<!-- more -->


<h2>Classes as machines</h2>

<p>When you write a class in a language like Java or C++, you&#8217;re in essence
writing a recipe for making objects with certain properties and behaviours. The
compiler then translates this recipe into a machine that can make such objects
whenever you need them at runtime. If you ignore the compilation step, you can
think of a &#8220;class&#8221; itself as the machine that produces objects, without loss of
accuracy.  It is this operational view of classes that offers the key to
reusing class-based modeling techniques in an objects-only language like
Javascript.</p>

<p>So, a class is a machine &#8212; in goes some parameters available only at runtime
and out comes an object with the properties and behaviour as dictated by the
recipe. That thinking can be directly modelled as a function that takes some
parameters and produces an object with the right properties and behaviour.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">MyClass</span><span class="p">(</span><span class="nx">params</span><span class="p">...);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In what follows, I&#8217;ll omit the parameters for simplicity of presentation and
you can always add them back later. So we have -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">MyClass</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives a &#8220;first order&#8221; view of classes. Though a useful way of thinking
in itself, you soon hit a modelling wall the moment you want another class
that is only slightly different from one you already wrote. You cringe at
having to copy-paste code to produce make objects of this slightly different
variety. What you want is some way to code up only the incremental difference
from <code>MyClass</code>.</p>

<h2>Combining classes</h2>

<p>One way out is to write a function that can combine the properties and behaviour
of two given objects &#8211; call it <code>blend</code>. So that will let you write -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">objVariant</span> <span class="o">=</span> <span class="nx">blend</span><span class="p">(</span><span class="nx">MyClass</span><span class="p">(),</span> <span class="nx">NewBehaviour</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>.. where <code>NewBehaviour</code> is a function that models only what is different
from <code>MyClass</code>.</p>

<p>The above approach, though valid, is limited by the inability of <code>NewBehaviour</code>
to have any kind of say over the changes to be introduced to the original object.
It would be ideal if <code>NewBehaviour</code> could first take a look at the object produced
by <code>MyClass</code> before it makes any changes to it. Therefore, <code>NewBehaviour</code> is better
written as a function that takes in the object produced by <code>MyClass</code> and returns
a new object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">objVariant</span> <span class="o">=</span> <span class="nx">NewBehaviour</span><span class="p">(</span><span class="nx">MyClass</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>NewBehaviour</code> can now be made arbitarily flexible. In retrospect, we could&#8217;ve
also written <code>MyClass</code> with an extra object parameter, so that the combination
of these two classes itself looks like an &#8220;object transformation machine&#8221;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">objVariant</span> <span class="o">=</span> <span class="nx">NewBehaviour</span><span class="p">(</span><span class="nx">MyClass</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>In other words, we model class inheritance in Javascript using function composition.
We can now write this notion of inheritance as a &#8220;higher order function&#8221; in Javascript
as -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Inherit</span><span class="p">(</span><span class="nx">Parent</span><span class="p">,</span> <span class="nx">Delta</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">Delta</span><span class="p">(</span><span class="nx">Parent</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Multiple inheritance and &#8220;mixins&#8221;</h2>

<p>The traditional notion of multiple inheritance froma number of classes <code>C1</code>, <code>C2</code>, and
so on in a specific order is then merely repeated application of <code>Inherit</code>. If we have
an array of classes <code>ClassArr</code> and we want to make a class that &#8220;inherits&#8221; from all of them,
all we need to do is &#8211;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">NoChange</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">MultiObj</span> <span class="o">=</span> <span class="nx">ClassArr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">Inherit</span><span class="p">,</span> <span class="nx">NoChange</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>.. which we can abstract again as a function that takes an array of classes
and produces a &#8220;multiply inherited class&#8221;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">MultiInherit</span><span class="p">(</span><span class="nx">ClassArr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">ClassArr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">Inherit</span><span class="p">,</span> <span class="nx">NoChange</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Modify or copy?</h4>

<p>Notice that we haven&#8217;t placed any constraints on these functions so far
with respect to whether they destructively modify the object passed in,
or return another object with the necessary properties. Both these
are acceptable and you may want to weigh which approach is suitable for
you. For instance, creating copies costs memory, but you trade off a one
time performance hit for repeated searches up an &#8220;inheritance tree&#8221;.</p>

<h2>Javascript&#8217;s &#8220;prototype&#8221; mechanism</h2>

<p>Let us take a simple example of inheritance to make further digging easier to
follow. Say we have an <code>Image</code> class that can produce objects that know how
to <code>draw</code> themselves into a <code>context</code> in portrait mode.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Image</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">...)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">obj</span><span class="p">.</span><span class="nx">draw</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// (pseudo code)</span>
</span><span class='line'>        <span class="nx">context</span><span class="p">.</span><span class="nx">putPixels</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">pixelData</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That was easy enough, but say we now want a variant of <code>Image</code> which produces
objects that draw themselves in landscape mode. i.e., we want -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">landscapeImage</span> <span class="o">=</span> <span class="nx">Landscape</span><span class="p">(</span><span class="nx">Image</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</span><span class='line'><span class="nx">landscapeImage</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>How would we write the <code>Landscape</code> class?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Landscape</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">lsDraw</span><span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">context</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">context</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="mi">90</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">obj</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">context</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">obj</span><span class="p">.</span><span class="nx">draw</span> <span class="o">=</span> <span class="nx">lsDraw</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple enough? &#8230; Oops! We&#8217;ve just introduced  an infinte draw loop because
the landscape object&#8217;s draw keeps calling itself!</p>

<p>To solve this, we need to first store away the object&#8217;s original
<code>draw</code> function and use <em>that</em> one within <code>lsDraw</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Landscape</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">portraitDraw</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">draw</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">lsDraw</span><span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">context</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">context</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="mi">90</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">portraitDraw</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">context</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">obj</span><span class="p">.</span><span class="nx">draw</span> <span class="o">=</span> <span class="nx">lsDraw</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is then the approach to use to model calling the &#8220;parent method&#8221; within a
&#8220;child class&#8221;.</p>

<p>If you&#8217;re modifying a dozen different methods, it can get pretty tiring
to save every method away in a variable before calling it within a modified
method. This, then, motivates the &#8220;prototype chain&#8221; mechanism in Javascript.</p>

<h2>The &#8220;prototype chain&#8221;</h2>

<p>Javascript provides a way for an object to delegate property and method
access to another object if they aren&#8217;t part of itself. Though we can
set up arbitrary numbers of such delegation chains ourselves, the builtin
mechanism serves to ease single inheritance cases. Our <code>Landscape</code> class
can now be written as -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Landscape</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">extendedObj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">lsDraw</span><span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">context</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">context</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="mi">90</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">obj</span><span class="p">.</span><span class="nx">draw</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">extendedObj</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">context</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">extendedObj</span><span class="p">.</span><span class="nx">draw</span> <span class="o">=</span> <span class="nx">lsDraw</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">extendedObj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Object.create</code> makes a new object that looks and behaves <em>exactly</em> like <code>obj</code>,
but now when you add a new property to <code>extendedObj</code>, the original <code>obj</code>
remains unmofied. Now, we don&#8217;t need to save away old method definitions
because the old object will always have them and so we can refer to the old
<code>draw</code> function as just <code>obj.draw</code>.</p>

<p>So, what&#8217;s up with the weird <code>obj.draw.call(extendedObj, context)</code> and why
can&#8217;t we just write <code>obj.draw(context)</code> instead?</p>

<p>To answer that, we need to look at what <code>obj.draw(..)</code> means to Javascript.
It means &#8220;draw <code>obj</code> making use of <em>its</em> properties&#8221;. If the <code>draw</code> function
needs to know the <code>width</code> of the object to do the drawing, it will access
it will get <code>obj.width</code> within the draw function. If we later on modify the
width of the <code>extendedObj</code>, that modified value will not be accessible when
running <code>obj.draw()</code> because <code>obj</code> does not know anything about the existence
of <code>extendedObj</code>.</p>

<p>The solution then, is to tell the <code>obj.draw</code> function to run, but ask it to
make use of the properties of <code>extendedObj</code> instead. Now, since <code>extendedObj</code>
otherwise has all the properties of <code>obj</code>, there is no information loss to the
<code>obj.draw</code> function. The way we tell the <code>obj.draw</code> function to do that is to
use the <code>call</code> method of the <code>Function</code> object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">draw</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">extendedObj</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code, btw, is equivalent to the following -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">oldDraw</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">draw</span><span class="p">;</span>
</span><span class='line'><span class="nx">oldDraw</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">extendedObj</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Adaptive methods</h2>

<p>Let&#8217;s take a second look at the implementation of <code>Image</code> and the <code>draw</code>
function in particular &#8211;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">draw</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="nx">context</span><span class="p">.</span><span class="nx">putPixels</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">pixels</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the draw function was originally implemented like above, then it would
be of no use to try to change the context using <code>Function.call</code> like in
<code>old.draw.call(extendedObj)</code> because the body of <code>old.draw</code> always explicitly
refers to the properties of <code>obj</code> itself.</p>

<blockquote><p>Oops! It looks like the original <code>Image</code> implementation cannot be extended,
although it would work fine on its own!</p></blockquote>

<p>What we want in this case, is for the <code>draw</code> function to be more generic and
pull properties from an arbitrary object. That is done using the dynamically
scoped <code>this</code> argument, which, when used within the body of a function, refers
to the object that the caller passed as the first argument to the <code>call</code>
function.</p>

<p>Here is a modified <code>draw</code> -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">draw</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="nx">context</span><span class="p">.</span><span class="nx">putPixels</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">pixels</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>When this draw function is called with <code>obj.draw.call(extendedObj)</code>,
the given <code>extendedObj</code> will substitute <code>this</code> within the funciton body,
and we get the correct behaviour. When you simply call <code>obj.draw(context)</code>,
Javascript looks to the left of the <code>draw</code> name figures out that <code>obj</code>
must be the <code>this</code> that the caller intended.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">draw</span><span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="o">&lt;==&gt;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">draw</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Therefore, in a prototype based object system, methods need to
be <em>explicitly</em> designed to support extension through prototype
chains.</p></blockquote>

<h2>Implementation details</h2>

<p>Every object <code>obj</code> in Javascript has an <code>obj.__proto__</code> property lurking in the
shadows, which refers to the object that will be looked up should some property
requested of  <code>obj</code> not be found in it. This is called the object&#8217;s &#8220;prototype&#8221;
and Javascript provides some simple special syntax to support making objects
using this prototype chain - the <code>new</code> operator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>What <code>new</code> does is exactly what the function <code>make</code> shown below does -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">make</span><span class="p">(</span><span class="nx">ClassFn</span><span class="p">,</span> <span class="nx">args</span><span class="p">...)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">ClassFn</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">ClassFn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">args</span><span class="p">...)</span> <span class="o">||</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the newly created <code>obj</code> is passed as the context in <code>ClassFn.call</code>,
the body of <code>ClassFn</code> can refer to the object whose properties need to
be filled in simply using <code>this</code> and it need not bother creating a
new object as well, since one is already available.</p>

<p>Note: There is nothing special about <code>ClassFn.prototype</code> and if you&#8217;re
writing your own <code>make</code> function, you can store a prototype object in
any field of <code>ClassFn</code>. It just happens to be the property that <code>new</code>
refers to in the bulitin implementation.</p>

<h2>Wrapping it all up</h2>

<ol>
<li><p>Model classes as functions that produce objects.</p></li>
<li><p>Model inheritance and &#8220;mixins&#8221; using higher order functions
and function composition.</p></li>
<li><p>When implementing methods, be aware of whether you want the method
to be extensible via the prototype chain or not. If a method with
a bound object in its body is called, it might end up modifying
the behaviour of <em>all</em> the objects that it is a prototype of!</p></li>
<li><p>Always be aware of what <code>this</code> value is being implicated in any
function or method call, by translating <code>fn(arg)</code> into <code>fn.call(??, arg)</code>.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Social hash as identity]]></title>
    <link href="http://srikumarks.github.com/blog/2012/01/03/social-hash-as-identity/"/>
    <updated>2012-01-03T00:00:00+08:00</updated>
    <id>http://srikumarks.github.com/blog/2012/01/03/social-hash-as-identity</id>
    <content type="html"><![CDATA[<p>(This is a &#8220;brain-dump&#8221; post).</p>

<p>Many write-ups and studies on social networks and privacy issues talk about the
risk of using one’s personal information disclosed within social networks for
identity theft. That made me think about whether it is really possible for an
identity thief to steal my entire social environment and history or whether
such theft is simply an indication of how broken the current paper-world
identity systems are in the digital age?</p>

<p>Enter the “social hash” – a short identification string that can be generated
from the data in your social network’s history that is very highly likely to be
unique to you and very difficult to duplicate in a &#8220;prove your identity&#8221;
challenge.</p>

<!-- more -->


<p>Let us consider a person’s &#8220;social history&#8221; (say on Facebook for simplicity,
but the same concept will also apply to google+) – i.e. The linear sequence of
events related to the establishment and termination of all my connections with
other people on the network. Each event is one of –</p>

<pre><code>joined on DATETIME at GPSLOC
added/removed PERSON to/from CIRCLE on DATETIME at GPSLOC
checkedin at GPSLOC on DATETIME
</code></pre>

<p>A stream of such events is guaranteed to be linear in time since they are all
actions taken by one person &#8230; with no two events having the same time time
stamp even at the 1 second resolution. A strong hash of this kind of “history
string” therefore captures &#8220;me&#8221; in terms of my social network history.
Authorities needing to verify my identity can request for a “recent ID” that
they can then verify using a back channel into the social network doubling as
an identity service.</p>

<p>Now, what should we use in the PERSON field for an event? It seems obvious that
it has to be that person&#8217;s ID hash at that particular event’s DATETIME when the
event happened. With this scheme, it seems to me that the only way an attacker
can steal your identity is to actually login as you – i.e. only by hacking into
your account. If the trusted social network and id provider (do I hear a &#8220;yeah,
right&#8221;?) uses a multiple-point verification system prior to revealing a recent
social snapshot hash of you to yourself (ex: SMS one time passcode and digipass
like banks do now), an attacker might have reasonable difficulty in producing
your ID string even if s/he has your account hacked. At each such point at
which your ID is verified successfully by an agency, a new verification event
can also be tacked on to your running hash similar to a checkin. Also, identity
verification can be conducted without actually having anyone peek into your
facebook/g+ account since they will only need to check hash equality. Existing
social networks will also be able to generate such an ID for you
retrospectively as well.</p>

<p>Do you think such a &#8220;social snapshot&#8221; as an ID can make identity theft
difficult? There are lots of corner cases and improvements that can be done on
the basic scheme described above, but my question is only that of viability of
the scheme.</p>

<p>Computing the hash at any given time would not require the whole history string
to be available. I described the hash as though it were computed on one long
string for simplicity, but we only need to compute a recursive hash – i.e. when
a new event happens, a new hash is generated by hashing together the most
recent hash and the new event record. This way, you don’t have to keep a long
running string anywhere in the social network provider’s backend.</p>

<p>If the provider’s user interface and APIs never reveal time information to a
sub-second accuracy and a millisecond accurate time stamp is used in the hash,
this can provide some additional difficulty in reproducing the hash as well.</p>

<p>(PS: My original google plus post on this is <a href="https://plus.google.com/102694714835839603248/posts/b7SsJTR1GGV">here</a>.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newcomb's problem and quantum physics]]></title>
    <link href="http://srikumarks.github.com/blog/2011/05/07/newcombs-problem-and-quantum-physics/"/>
    <updated>2011-05-07T00:00:00+08:00</updated>
    <id>http://srikumarks.github.com/blog/2011/05/07/newcombs-problem-and-quantum-physics</id>
    <content type="html"><![CDATA[<p>How would <a href="http://lesswrong.com/lw/nc/newcombs_problem_and_regret_of_rationality/">Newcomb&#8217;s problem</a> look like in the physical world, taking quantum
physics into account? Specifically, would Omega need to know quantum physics in
order to predict my decision on &#8220;to one box or not to one box&#8221;?</p>

<p>To simplify the picture, imagine that Omega has a variable with it that can be
either in the state A+B or B and which is expected to correlate with my
decision and therefore serves to &#8220;predict&#8221; me. Omega runs some physical process
to arrive at the contents of this variable. I&#8217;m assuming that &#8220;to predict&#8221;
means &#8220;to simulate&#8221; - i.e. Omega can predict me by running a simulation of me
(say using a universal quantum Turing machine) though that is not necessarily
the only way to do so. Given that we&#8217;re in a quantum world, would Omega
actually need to simulate me in order to ensure a correlation between its
variable and my choice, potentially in another galaxy, of whether to pick A+B
or B?</p>

<!-- more -->


<p>Say <code>|Oab&gt;</code> and <code>|Ob&gt;</code> are the two eigenstates of Omega&#8217;s variable (w.r.t.
some operator it has) and the box system in front of me similarly has two
eigenstates <code>|Cab&gt;</code> and <code>|Cb&gt;</code> (&#8220;C&#8221; for &#8220;choice&#8221;) and my &#8220;action&#8221; is simply a
choice of measuring the box system in the state <code>|Cab&gt;</code> or in the state
<code>|Cb&gt;</code> and not a mixture of them.</p>

<p>If Omega sets up an EPR-like entanglement between its variable and the box
system of the form <code>m|Oab&gt;|Cab&gt; + n|Ob&gt;|Cb&gt;</code>, and then chooses to measure a
mixed state of its variable, say, <code>|Oab&gt;+|Ob&gt;</code>, it can bifurcate the universe.
Then, if I measure <code>|Cab&gt;</code> (i.e. choose A+B), I end up in the same universe as
the one in which Omega measured its variable to be <code>|Oab&gt;</code> and if I choose
<code>|Cb&gt;</code>, I end up in the same universe as the one in which Omega measured its
variable to be <code>|Ob&gt;</code>.  Therefore, if our two systems are entangled this way,
Omega wouldn&#8217;t need to take any trouble to simulate me at all in order to
ensure its reputation of being a perfect predictor!</p>

<p>That is only as far as Omega&#8217;s reputation for being a perfect predictor is
concerned. But hold on for a moment there. In this setup, the box system&#8217;s
state is not disconnected from that of Omega&#8217;s predictor variable even if Omega
has left the galaxy and yet Omega cannot causally influence it &#8220;contents&#8221;. In
my thinking, this is an argument against the stance of the &#8220;causal decision
theorists&#8221; that whatever the contents of the box, it is &#8220;fixed&#8221; and therefore I
maximize my utility by picking A+B. This is now an argument for the one boxers
observing that Omega has shown a solid history of being right (i.e. Omega&#8217;s
internal variable has always correlated with the choices of all the people
before), forming the simplest (?) explanation that Omega could be using quantum
entanglement to effect the correlation, and therefore choosing to one box so
that they end up in the universe with a million bucks instead of the one with a
thousand.</p>

<p>So, my final question is this - does knowledge of quantum physics resolve
Newcomb&#8217;s problem in favour of the one boxers? If not, the arguments certainly
would be interesting to read :)</p>

<p>PS: I tried to post this on the Less Wrong site but my post isn&#8217;t appearing in
the comments. So I&#8217;m just posting it here for starters.</p>
]]></content>
  </entry>
  
</feed>
